import sys

def printBroad(board):
    for i  in range(len(board)): 
        if i == 0:
            print("    1 2 3   4 5 6   7 8 9")
            print("- - - - - - - - - - - - -")
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - -")
        for j in range(len(board[0])):
            if j == 0: 
                print(i + 1, "| ", end = "")
            if j % 3 == 0 and j != 0:
                print("| ", end = "")
            if j == 8: 
                print(board[i][j])
            else: 
                print(str(board[i][j]) + " ",end = "")
        
def solve(board):
    printBroad(board)
    print("")
    empty = findEmpty(board)

    if not empty:
        return True
    else: 
        row, col = empty
    
    for i in range(1,10):
        if checkValid(board, i, empty):
            board[row][col] = i
            print("Dien", i, "vao hang", (row + 1), "cot", (col + 1))

            if solve(board):
                return True
            
            print("Khong tim thay so phu hop. Xoa", i, "o cot", (col + 1), "hang", (row + 1))
            board[row][col] = 0

    return False

def checkValid(board, num , pos):
    # Check column
    for i  in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False
        
    # Check row
    for i  in range(len(board)):
        if board[pos[0]][i] == num and pos[1] != i:
            return False 
        
    # Check 3x3 box
    box_x = pos[1] // 3
    box_y = pos[0] // 3
    
    for i in range(box_y * 3, box_y * 3 + 3):
         for j in range(box_x * 3, box_x * 3 + 3):
             if board[i][j] == num and (i,j) != pos:
                 return False
             
    return True

def findEmpty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)
    
    return None

bo_test1 = [ 
    [0,0,3,5,1,0,6,2,8],
    [2,9,0,0,0,3,7,0,0],
    [0,0,0,0,4,0,0,0,5],
    [0,4,7,0,3,8,2,0,0],
    [5,1,2,6,0,7,0,4,0],
    [6,0,0,0,0,5,0,9,0],
    [7,8,0,0,0,0,0,6,0],
    [0,0,6,9,0,0,5,0,1],
    [1,0,4,2,7,0,3,0,0]
]

bo_test2 = [
    [2,3,0,1,0,0,4,0,8],
    [7,0,5,0,0,2,0,6,0],
    [0,1,0,0,8,9,0,5,0],
    [0,0,6,3,0,7,0,0,2],
    [0,7,3,0,4,8,0,0,1],
    [8,4,0,0,9,0,0,0,5],
    [4,6,8,0,0,3,0,0,7],
    [0,0,1,5,7,0,9,0,0],
    [9,0,0,0,0,6,3,2,0]
]
bo_test3 = [
    [0,9,0,2,0,0,7,1,4],
    [0,0,8,7,0,6,0,0,3],
    [0,2,5,0,4,3,0,9,0],
    [2,0,0,0,0,0,8,6,0],
    [3,5,0,9,7,0,1,0,0],
    [0,4,1,0,5,2,0,0,7],
    [0,3,0,8,1,4,5,0,6],
    [1,0,0,0,0,0,0,2,9],
    [0,6,7,3,0,0,0,0,0]
]

bo_test4 = [
    [0,5,6,8,0,7,3,0,0],
    [0,2,0,3,0,0,9,0,0],
    [0,0,4,0,6,2,0,7,1],
    [0,8,0,0,2,5,1,0,7],
    [3,0,0,0,4,0,0,6,0],
    [0,7,0,1,0,0,2,9,4],
    [5,0,1,0,3,6,0,8,0],
    [8,9,3,0,7,1,0,2,5],
    [0,0,0,9,0,0,4,0,0]
]

bo_test5 = [
    [8,0,1,0,3,0,2,0,0],
    [3,0,0,9,1,0,0,5,7],
    [5,0,0,4,0,6,9,1,0],
    [6,3,0,0,0,0,4,0,2],
    [0,0,5,0,2,0,0,8,9],
    [0,8,0,3,7,9,1,0,0],
    [9,0,0,1,0,7,6,0,8],
    [2,4,0,5,6,0,0,0,0],
    [0,7,0,0,0,8,0,3,0]
]

bo_test6 = [
    [0,5,7,0,0,9,0,8,0],
    [6,0,8,0,3,2,0,7,0],
    [9,4,0,0,0,6,1,0,5],
    [0,7,0,1,0,3,5,0,0],
    [4,0,0,8,0,0,6,0,0],
    [0,2,5,0,7,0,0,9,3],
    [2,6,1,0,4,7,3,0,8],
    [0,0,0,0,6,1,0,2,4],
    [0,3,0,0,5,0,9,0,0]
]

bo_test7 = [
    [0,2,3,7,0,0,0,6,0],
    [6,0,0,0,2,0,0,3,0],
    [1,0,4,0,9,6,0,7,0],
    [0,0,5,0,0,2,4,0,0],
    [0,7,0,0,0,0,0,0,8],
    [0,0,9,1,8,0,0,2,0],
    [3,1,0,6,0,0,0,0,0],
    [0,0,6,0,0,0,9,4,0],
    [0,0,0,5,7,1,0,0,0]
]

bo_test8 = [
    [6,1,5,0,4,0,0,3,0],
    [2,0,4,0,8,6,1,0,9],
    [8,0,9,1,0,7,0,4,0],
    [0,0,6,0,7,8,0,2,0],
    [0,5,2,0,6,0,9,0,8],
    [3,0,8,9,0,2,0,7,0],
    [9,0,1,7,3,0,2,0,0],
    [0,2,7,8,0,5,0,0,1],
    [0,8,0,6,0,0,7,0,4]
]

bo_test9 = [
    [0,6,0,0,7,4,0,0,8],
    [0,7,5,0,3,0,0,0,1],
    [4,0,2,9,6,0,0,0,3],
    [2,0,8,0,0,5,4,0,0],
    [0,0,7,2,9,0,0,1,5],
    [0,3,1,0,0,8,9,6,0],
    [0,0,0,3,2,9,0,0,6],
    [0,0,9,1,0,6,5,7,0],
    [8,1,0,4,0,0,0,2,0]
]

bo_test10 = [
    [0,1,0,0,4,0,0,8,5],
    [3,0,6,2,0,0,0,9,0],
    [0,2,0,0,1,0,0,3,0],
    [0,0,4,0,0,2,6,0,0],
    [1,0,0,0,0,5,0,0,9],
    [0,0,0,8,0,0,7,0,4],
    [0,6,0,0,0,0,8,0,1],
    [0,9,0,7,3,0,0,0,2],
    [0,0,5,6,0,0,0,0,0]
]

bo_test11 = [
    [0,5,0,1,3,0,4,0,8],
    [0,8,9,0,5,2,0,6,0],
    [3,0,6,9,7,0,1,0,0],
    [9,0,0,0,8,0,0,5,4],
    [0,7,2,0,0,4,0,0,1],
    [0,1,0,6,0,3,8,7,0],
    [7,0,0,0,1,5,9,0,0],
    [0,0,0,8,0,0,3,0,2],
    [4,3,1,0,6,0,0,0,7]
]

bo_test12 = [ 
    [0,8,6,0,0,1,0,0,0],
    [7,0,0,5,0,0,0,9,2],
    [0,0,9,0,7,0,3,0,0],
    [1,9,0,0,2,0,4,0,0],
    [0,0,0,0,3,0,0,0,9],
    [0,7,0,8,4,0,0,5,0],
    [4,2,0,0,0,6,0,8,0],
    [0,5,7,0,0,0,1,0,0],
    [6,0,0,9,0,3,0,7,0]
]
bo_test13 = [ 
    [0,0,0,0,0,0,0,8,5],
    [0,0,6,0,0,2,0,0,4],
    [0,0,9,3,7,0,0,0,0],
    [3,7,0,0,1,9,0,0,0],
    [2,1,0,0,0,0,6,3,0],
    [0,0,0,4,0,0,5,0,0],
    [8,0,1,0,6,0,9,0,0],
    [0,5,0,8,4,0,2,0,0],
    [7,0,0,0,3,0,0,0,1]
]

bo_test14 =  [ 
    [0,7,5,9,0,3,8,0,1],
    [3,8,0,0,2,0,0,4,0],
    [1,0,6,5,0,7,9,0,0],
    [0,2,7,0,0,8,4,5,0],
    [0,0,3,7,0,0,6,0,8],
    [9,1,0,4,6,0,3,7,0],
    [7,0,2,3,5,0,0,8,0],
    [0,9,1,0,7,4,0,3,6],
    [5,0,4,8,1,0,2,0,7]]

bo_test15 = [ 
    [0,0,2,0,3,4,0,0,7],
    [6,0,0,8,0,0,5,0,0],
    [0,3,0,0,1,0,0,9,0],
    [0,0,3,0,0,0,9,7,8],
    [0,4,9,0,7,0,2,0,0],
    [8,0,0,0,0,0,0,1,0],
    [0,9,4,0,0,0,0,2,0],
    [0,0,0,0,6,5,0,0,0],
    [7,0,8,2,0,0,0,3,5]
]

bo_test16 = [ 
    [3,0,0,0,4,0,0,0,0],
    [0,0,8,0,0,0,0,2,0],
    [0,0,6,0,0,8,0,7,5],
    [0,0,0,0,6,0,7,0,1],
    [0,0,0,1,5,0,0,9,2],
    [0,0,0,7,0,2,0,0,0],
    [0,0,0,0,0,0,8,3,0],
    [5,9,0,0,0,0,0,0,0],
    [1,0,0,0,7,0,9,0,0]
]


print ("Testcase 1")
a = solve(bo_test1)
printBroad(bo_test1)
print("Mem memorry usage = ", sys.getsizeof(a))